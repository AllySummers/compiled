"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.useCache = void 0;

var React = _interopRequireWildcard(require("react"));

var _isNode = require("./is-node");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Cache to hold already used styles.
 * React Context on the server - singleton object on the client.
 */
var Cache = false ? /*#__PURE__*/(0, React.createContext)(null) : {};

if (!false) {
  /**
   * Iterates through all found style elements generated when server side rendering.
   *
   * @param cb
   */
  var ssrStyles = document.querySelectorAll('style[data-cmpld]');

  for (var i = 0; i < ssrStyles.length; i++) {
    // Move all found server-side rendered style elements to the head before React hydration happens.
    document.head.appendChild(ssrStyles[i]);
  }
}
/**
 * Hook using the cache created on the server or client.
 */


var useCache = function () {
  if (false) {
    // On the server we use React Context to we don't leak the cache between SSR calls.
    // During runtime this hook isn't conditionally called - it is at build time that the flow gets decided.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return (0, React.useContext)(Cache) || {};
  } // On the client we use the object singleton.


  return Cache;
};
/**
 * On the server this ensures the minimal amount of styles will be rendered
 * safely using React Context.
 *
 * On the browser this turns into a fragment with no React Context.
 */


exports.useCache = useCache;

var StyleCacheProvider = function (props) {
  if (false) {
    // This code path isn't conditionally called at build time - safe to ignore.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var inserted = useCache();
    return /*#__PURE__*/React.createElement(Cache.Provider, {
      value: inserted
    }, props.children);
  }

  return props.children;
};

var _default = StyleCacheProvider;
exports.default = _default;