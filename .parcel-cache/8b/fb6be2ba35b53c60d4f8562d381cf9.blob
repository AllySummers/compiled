"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _sheet = _interopRequireWildcard(require("./sheet"));

var _devWarnings = require("./dev-warnings");

var _styleCache = require("./style-cache");

var _isNode = require("./is-node");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Style(props) {
  var inserted = (0, _styleCache.useCache)();

  if ("development" === 'development') {
    props.children.forEach(_devWarnings.analyzeCssInDev);
  }

  if (props.children.length) {
    if (false) {
      var bucketedSheets_1 = {};
      var hasSheets = false;

      for (var i = 0; i < props.children.length; i++) {
        var sheet = props.children[i];

        if (inserted[sheet]) {
          continue;
        } else {
          inserted[sheet] = true;
          hasSheets = true;
        }

        var bucketName = (0, _sheet.getStyleBucketName)(sheet);
        bucketedSheets_1[bucketName] = (bucketedSheets_1[bucketName] || '') + sheet;
      }

      if (!hasSheets) {
        return null;
      }

      return /*#__PURE__*/_react.default.createElement("style", {
        "data-cmpld": true,
        nonce: props.nonce
      }, _sheet.styleBucketOrdering.map(function (bucket) {
        return bucketedSheets_1[bucket];
      }).join(''));
    } else {
      for (var i = 0; i < props.children.length; i++) {
        var sheet = props.children[i];

        if (inserted[sheet]) {
          continue;
        }

        inserted[sheet] = true;
        (0, _sheet.default)(sheet, props);
      }
    }
  }

  return null;
}

var _default = /*#__PURE__*/(0, _react.memo)(Style, function () {
  return true;
});

exports.default = _default;